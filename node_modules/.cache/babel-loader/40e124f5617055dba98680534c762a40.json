{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aniket\\\\OneDrive\\\\Documents\\\\PracticeProject\\\\ChatApp\\\\appsync-subs\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Amplify from '@aws-amplify/core';\nimport API, { graphqlOperation } from '@aws-amplify/api';\nimport '@aws-amplify/pubsub';\nimport { createMessage } from './graphql/mutations';\nimport { onCreateMessage } from './graphql/subscriptions';\nimport { messagesByChannelID } from './graphql/queries';\nimport awsExports from './aws-exports';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nAmplify.configure(awsExports);\n\nfunction App() {\n  _s();\n\n  const [messages, setMessages] = useState([]);\n  const [messageBody, setMessageBody] = useState('');\n  useEffect(() => {\n    API.graphql(graphqlOperation(messagesByChannelID, {\n      channelID: '1',\n      sortDirection: 'ASC'\n    })).then(response => {\n      var _response$data, _response$data$messag;\n\n      const items = response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$messag = _response$data.messagesByChannelID) === null || _response$data$messag === void 0 ? void 0 : _response$data$messag.items;\n\n      if (items) {\n        setMessages(items);\n      }\n    });\n  }, []);\n  useEffect(() => {\n    const subscription = API.graphql(graphqlOperation(onCreateMessage)).subscribe({\n      next: event => {\n        setMessages([...messages, event.value.data.onCreateMessage]);\n      }\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [messages]);\n\n  const handleChange = event => {\n    setMessageBody(event.target.value);\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    event.stopPropagation();\n    const input = {\n      channelID: '1',\n      author: 'Dave',\n      body: messageBody.trim()\n    };\n\n    try {\n      setMessageBody('');\n      await API.graphql(graphqlOperation(createMessage, {\n        input\n      }));\n    } catch (error) {\n      console.warn(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages-scroller\",\n        children: messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: message.author === 'Dave' ? 'message me' : 'message' || message.author !== 'Dave',\n          children: message.body\n        }, message.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-bar\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"message\",\n          placeholder: \"Type your message here...\",\n          onChange: handleChange,\n          value: messageBody\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"SQRl1w3lRLAR0FdGtzik4t5v72s=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Aniket/OneDrive/Documents/PracticeProject/ChatApp/appsync-subs/src/App.js"],"names":["React","useEffect","useState","Amplify","API","graphqlOperation","createMessage","onCreateMessage","messagesByChannelID","awsExports","configure","App","messages","setMessages","messageBody","setMessageBody","graphql","channelID","sortDirection","then","response","items","data","subscription","subscribe","next","event","value","unsubscribe","handleChange","target","handleSubmit","preventDefault","stopPropagation","input","author","body","trim","error","console","warn","map","message","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,GAAP,IAAcC,gBAAd,QAAsC,kBAAtC;AACA,OAAO,qBAAP;AAEA,SAASC,aAAT,QAA8B,qBAA9B;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,mBAAT,QAAoC,mBAApC;AAEA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAO,WAAP;;AAEAN,OAAO,CAACO,SAAR,CAAkBD,UAAlB;;AAEA,SAASE,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACY,WAAD,EAAcC,cAAd,IAAgCb,QAAQ,CAAC,EAAD,CAA9C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,GAAG,CACAY,OADH,CACWX,gBAAgB,CAACG,mBAAD,EAAsB;AAC7CS,MAAAA,SAAS,EAAE,GADkC;AAE7CC,MAAAA,aAAa,EAAE;AAF8B,KAAtB,CAD3B,EAKGC,IALH,CAKSC,QAAD,IAAc;AAAA;;AAClB,YAAMC,KAAK,GAAGD,QAAH,aAAGA,QAAH,yCAAGA,QAAQ,CAAEE,IAAb,4EAAG,eAAgBd,mBAAnB,0DAAG,sBAAqCa,KAAnD;;AAEA,UAAIA,KAAJ,EAAW;AACTR,QAAAA,WAAW,CAACQ,KAAD,CAAX;AACD;AACF,KAXH;AAYD,GAbQ,EAaN,EAbM,CAAT;AAeApB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMsB,YAAY,GAAGnB,GAAG,CACrBY,OADkB,CACVX,gBAAgB,CAACE,eAAD,CADN,EAElBiB,SAFkB,CAER;AACTC,MAAAA,IAAI,EAAGC,KAAD,IAAW;AACfb,QAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcc,KAAK,CAACC,KAAN,CAAYL,IAAZ,CAAiBf,eAA/B,CAAD,CAAX;AACD;AAHQ,KAFQ,CAArB;AAQA,WAAO,MAAM;AACXgB,MAAAA,YAAY,CAACK,WAAb;AACD,KAFD;AAGD,GAZQ,EAYN,CAAChB,QAAD,CAZM,CAAT;;AAcA,QAAMiB,YAAY,GAAIH,KAAD,IAAW;AAC9BX,IAAAA,cAAc,CAACW,KAAK,CAACI,MAAN,CAAaH,KAAd,CAAd;AACD,GAFD;;AAIA,QAAMI,YAAY,GAAG,MAAOL,KAAP,IAAiB;AACpCA,IAAAA,KAAK,CAACM,cAAN;AACAN,IAAAA,KAAK,CAACO,eAAN;AAEA,UAAMC,KAAK,GAAG;AACZjB,MAAAA,SAAS,EAAE,GADC;AAEZkB,MAAAA,MAAM,EAAE,MAFI;AAGZC,MAAAA,IAAI,EAAEtB,WAAW,CAACuB,IAAZ;AAHM,KAAd;;AAMA,QAAI;AACFtB,MAAAA,cAAc,CAAC,EAAD,CAAd;AACA,YAAMX,GAAG,CAACY,OAAJ,CAAYX,gBAAgB,CAACC,aAAD,EAAgB;AAAE4B,QAAAA;AAAF,OAAhB,CAA5B,CAAN;AACD,KAHD,CAGE,OAAOI,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,IAAR,CAAaF,KAAb;AACD;AACF,GAhBD;;AAkBA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA,kBACG1B,QAAQ,CAAC6B,GAAT,CAAcC,OAAD,iBACZ;AAEE,UAAA,SAAS,EAAEA,OAAO,CAACP,MAAR,KAAmB,MAAnB,GAA4B,YAA5B,GAA2C,aAAaO,OAAO,CAACP,MAAR,KAAmB,MAFxF;AAAA,oBAEiGO,OAAO,CAACN;AAFzG,WACOM,OAAO,CAACC,EADf;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAUE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,6BACE;AAAM,QAAA,QAAQ,EAAEZ,YAAhB;AAAA,+BACE;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,IAAI,EAAC,SAFP;AAGE,UAAA,WAAW,EAAC,2BAHd;AAIE,UAAA,QAAQ,EAAEF,YAJZ;AAKE,UAAA,KAAK,EAAEf;AALT;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD;;GA9EQH,G;;KAAAA,G;AAgFT,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport Amplify from '@aws-amplify/core';\nimport API, { graphqlOperation } from '@aws-amplify/api';\nimport '@aws-amplify/pubsub';\n\nimport { createMessage } from './graphql/mutations';\nimport { onCreateMessage } from './graphql/subscriptions';\nimport { messagesByChannelID } from './graphql/queries';\n\nimport awsExports from './aws-exports';\nimport './App.css';\n\nAmplify.configure(awsExports);\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n  const [messageBody, setMessageBody] = useState('');\n\n  useEffect(() => {\n    API\n      .graphql(graphqlOperation(messagesByChannelID, {\n        channelID: '1',\n        sortDirection: 'ASC'\n      }))\n      .then((response) => {\n        const items = response?.data?.messagesByChannelID?.items;\n\n        if (items) {\n          setMessages(items);\n        }\n      })\n  }, []);\n\n  useEffect(() => {\n    const subscription = API\n      .graphql(graphqlOperation(onCreateMessage))\n      .subscribe({\n        next: (event) => {\n          setMessages([...messages, event.value.data.onCreateMessage]);\n        }\n      });\n\n    return () => {\n      subscription.unsubscribe();\n    }\n  }, [messages]);\n\n  const handleChange = (event) => {\n    setMessageBody(event.target.value);\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    event.stopPropagation();\n\n    const input = {\n      channelID: '1',\n      author: 'Dave',\n      body: messageBody.trim()\n    };\n\n    try {\n      setMessageBody('');\n      await API.graphql(graphqlOperation(createMessage, { input }))\n    } catch (error) {\n      console.warn(error);\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"messages\">\n        <div className=\"messages-scroller\">\n          {messages.map((message) => (\n            <div\n              key={message.id}\n              className={message.author === 'Dave' ? 'message me' : 'message' || message.author !== 'Dave'}>{message.body}</div>\n          ))}\n        </div>\n      </div>\n      <div className=\"chat-bar\">\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            name=\"message\"\n            placeholder=\"Type your message here...\"\n            onChange={handleChange}\n            value={messageBody} />\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}